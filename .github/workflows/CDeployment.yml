env:
  project_id:   "csubrsnzorjkvdca"
  
  
  name: ContinuousDeployment
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3


###############     Below commands a for GCP authentication
      # Authenticate to GCP

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT }}'


      # Get k8s credentials
      - name: Get k8s credentials
        run: |
          gcloud container clusters get-credentials project-cluster --region us-central1
          kubectl get nodes


          
###############      Below commands are for deploying app

      # Runs a set of commands using the runners shell
      - name: Initialize
        run: |
          terraform init 





      # Runs a set of commands using the runners shell
      - name: Create workspace
        run: |
          terraform workspace  select  dev   ||  terraform workspace  new  dev



      - name: Login to GCR
        run: |
          gcloud auth configure-docker  us-central1-docker.pkg.dev
       



      # Runs a set of commands using the runners shell
      - name: Clone a repo
        run: |
          rm -rf ~/.kube/config
          gcloud container clusters get-credentials project-cluster --region us-central1
          ls -la 
          cat ~/.kube/config
          terraform apply     --auto-approve


          
          
